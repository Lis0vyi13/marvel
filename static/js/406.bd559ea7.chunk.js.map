{"version":3,"file":"static/js/406.bd559ea7.chunk.js","mappings":"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","sources":["components/charList/listLoader/ListLoader.js","components/appMain/AppMain.js","components/blockTitle/BlockTitle.js","components/randomChar/RandomChar.js","components/appMainList/AppMainList.js","components/charList/CharList.js","components/searchForm/SearchForm.js","components/charInfo/CharInfo.js","components/pages/CharactersPage.js"],"sourcesContent":["import './listLoader.scss';\r\n\r\nconst ListLoader = () => {\r\n  return (\r\n    <div className='loadingio-spinner-ellipsis-6iszfz84awk list-loader'>\r\n      <div className='ldio-xlbd2dzlxer'>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListLoader;\r\n","import { motion } from 'framer-motion';\r\n\r\nimport './appMain.scss';\r\n\r\nimport spiderMan from '../../assets/images/Spider-man.png';\r\nimport { textAnim, imgAnim } from '../../animations/anim';\r\n\r\nconst AppMain = (props) => {\r\n  const scrollToRandomCharBlock = () => {\r\n    const randomChar = props.randomCharBlock.current;\r\n\r\n    window.scrollTo({\r\n      behavior: 'smooth',\r\n      top: randomChar.offsetTop - 50,\r\n    });\r\n  };\r\n  return (\r\n    <motion.main\r\n      initial='hidden'\r\n      whileInView='visible'\r\n      viewport={{ once: true }}\r\n      className='main'\r\n    >\r\n      <div className='container'>\r\n        <section className='main__container'>\r\n          <motion.img\r\n            variants={imgAnim}\r\n            custom={1}\r\n            className='main__bg-img'\r\n            src={spiderMan}\r\n            alt='Spider man'\r\n          />\r\n          <div className='main__content'>\r\n            <motion.h1 custom={1} variants={textAnim} className='main-title'>\r\n              UNLEASH YOUR INNER HERO\r\n            </motion.h1>\r\n            <motion.h3\r\n              custom={1.5}\r\n              variants={textAnim}\r\n              className='main-description'\r\n            >\r\n              Empower yourself with our platform and delve into the vast world\r\n              of characters and comics through the Marvel API. Discover the\r\n              tales that have forged legendary icons.\r\n            </motion.h3>\r\n            <motion.button\r\n              custom={2.5}\r\n              variants={textAnim}\r\n              onClick={scrollToRandomCharBlock}\r\n              className='btn red-btn'\r\n            >\r\n              Get Started\r\n            </motion.button>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </motion.main>\r\n  );\r\n};\r\n\r\nexport default AppMain;\r\n","import { motion } from 'framer-motion';\r\nimport { blockTitleAnim, dividerAnim } from '../../animations/anim';\r\n\r\nimport './blockTitle.scss';\r\nconst BlockTitle = ({ title }) => {\r\n  return (\r\n    <motion.section\r\n      className='block-name'\r\n      initial='hidden'\r\n      whileInView='visible'\r\n      viewport={{ once: true }}\r\n    >\r\n      <motion.h4 variants={blockTitleAnim} className='block-title'>\r\n        {title}\r\n      </motion.h4>\r\n      <motion.div variants={dividerAnim} className='divider'></motion.div>\r\n    </motion.section>\r\n  );\r\n};\r\n\r\nexport default BlockTitle;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport Marvel from '../../services/Marvel';\r\n\r\nimport BlockTitle from '../blockTitle/BlockTitle';\r\nimport { cardAnim } from '../../animations/anim';\r\nimport Loader from '../loader/Loader';\r\nimport Error from '../error/Error';\r\n\r\nimport './randomChar.scss';\r\n\r\nimport miniSpiderMan from '../../assets/images/spiddy.png';\r\n\r\nconst CharContent = ({ state }) => {\r\n  const { thumbnail, name, description, homepage, wiki } = state;\r\n  return (\r\n    <>\r\n      <div className='random-char__character-thumb'>\r\n        <img src={thumbnail} alt='' className='random-char__thumb' />\r\n      </div>\r\n      <div className='random-char__character-text'>\r\n        <div className='random-char__character-name'>\r\n          <p className='random-char__character-name-title'>{name}</p>\r\n        </div>\r\n        <div className='random-char__character-description'>\r\n          <p className='random-char__character-description-text'>\r\n            {description}\r\n          </p>\r\n        </div>\r\n        <div className='random-char__character-buttons'>\r\n          <a\r\n            className='btn random red-btn random-char__character-button'\r\n            href={homepage}\r\n          >\r\n            Homepage\r\n          </a>\r\n          <a className='btn random-char__character-button gray-btn' href={wiki}>\r\n            Wiki\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst RandomChar = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [hasError, setError] = useState(false);\r\n  const [_isMounted, setIsMounted] = useState(true);\r\n  const [charData, setCharData] = useState({\r\n    name: 'Not found',\r\n    description: 'Empty details, no description found here',\r\n    thumbnail: '',\r\n    homepage: '',\r\n    wiki: '',\r\n  });\r\n  const randomCharBlock = useRef(null);\r\n  const { setRandomChar, title } = props;\r\n\r\n  const MAXLENGTH = 118;\r\n  const marvel = new Marvel();\r\n\r\n  useEffect(() => {\r\n    setRandomChar(randomCharBlock);\r\n    getCharacterInfo();\r\n\r\n    return () => {\r\n      setIsMounted(false);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getFormattedDescription = (description) => {\r\n    return description.length > MAXLENGTH\r\n      ? description.slice(0, MAXLENGTH - 3) + '...'\r\n      : description;\r\n  };\r\n  const getCharacterInfo = async () => {\r\n    setLoading(true);\r\n    setError(false);\r\n    try {\r\n      const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n      const res = await marvel.getCharInfo(id);\r\n      const char = res[0];\r\n\r\n      setCharData({\r\n        name: char.name || 'Not found',\r\n        description:\r\n          getFormattedDescription(char.description) ||\r\n          'Empty details, no description found here',\r\n        thumbnail: char.thumbnail,\r\n        homepage: char.homepage,\r\n        wiki: char.wiki,\r\n      });\r\n    } catch {\r\n      if (_isMounted) {\r\n        onError();\r\n        onLoadInfo();\r\n      }\r\n    } finally {\r\n      onLoadInfo();\r\n    }\r\n  };\r\n  const onLoadInfo = () => {\r\n    setLoading(false);\r\n  };\r\n\r\n  const onError = () => {\r\n    setError(true);\r\n  };\r\n  const loader = loading && <Loader />;\r\n  const error = hasError && <Error />;\r\n  const content = !(loader || error) && <CharContent state={charData} />;\r\n  return (\r\n    <section ref={randomCharBlock} className='random-char'>\r\n      <div className='container random-char__container'>\r\n        <BlockTitle title={title} />\r\n        <motion.section\r\n          initial='hidden'\r\n          whileInView='visible'\r\n          viewport={{ once: true }}\r\n          className='random-char__content'\r\n        >\r\n          <motion.div\r\n            variants={cardAnim}\r\n            custom={1}\r\n            className='random-char__character'\r\n          >\r\n            <div className='random-char__character-content'>\r\n              {loader}\r\n              {error}\r\n              {content}\r\n            </div>\r\n          </motion.div>\r\n          <motion.div\r\n            variants={cardAnim}\r\n            custom={3}\r\n            className='random-char__try-it'\r\n          >\r\n            <img\r\n              className='random-char__try-it-image'\r\n              src={miniSpiderMan}\r\n              alt='mini spider man'\r\n            />\r\n            <div className='random-char__try-it-content'>\r\n              <div className='random-char__try-it-text'>\r\n                <p className='random-char__try-it-text-content'>\r\n                  Random character for today! <br /> Do you want to get to know\r\n                  him better?\r\n                </p>\r\n              </div>\r\n              <div className='random-char__try-it-cta'>\r\n                <p className='random-char__try-it-text-content'>\r\n                  Or choose another one\r\n                </p>\r\n                <button\r\n                  onClick={getCharacterInfo}\r\n                  className='btn red-btn random-char__try-it-button'\r\n                >\r\n                  Try it\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        </motion.section>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import './appMainList.scss';\r\nimport BlockTitle from '../blockTitle/BlockTitle';\r\n\r\nconst AppMainList = ({ children }) => {\r\n  return (\r\n    <div className='main__list'>\r\n      <div className='container main__list-container'>\r\n        <BlockTitle title={'Characters list'} />\r\n        <div className='main__list-content'>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppMainList;\r\n","import './charList.scss';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\n\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\nimport 'react-loading-skeleton/dist/skeleton.css';\r\n\r\nimport Marvel from '../../services/Marvel';\r\nimport { cardAnim } from '../../animations/anim';\r\nimport ListLoader from './listLoader/ListLoader';\r\n\r\nconst Card = ({ img, name, onCardFocus, onCardClick }) => {\r\n  return (\r\n    <div\r\n      tabIndex='0'\r\n      onFocus={onCardFocus}\r\n      onClick={onCardClick}\r\n      className='char-list__item'\r\n    >\r\n      <div className='char-list__img'>\r\n        <img src={img} alt={name} />\r\n      </div>\r\n      <div className='char-list__name'>\r\n        <h2>{name}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst CardSkeleton = () => {\r\n  const cardsCount = 10;\r\n  const skeletonCards = [];\r\n\r\n  for (let i = 1; i < cardsCount; i++) {\r\n    skeletonCards.push(\r\n      <SkeletonTheme key={i} baseColor='#202020' highlightColor='#444'>\r\n        <div className='char-list__item'>\r\n          <div className='char-list__img'>\r\n            <Skeleton height={190} width={'100%'} />\r\n          </div>\r\n          <div className='char-list__name'>\r\n            <Skeleton count={2} height={30} width={'100%'} />\r\n          </div>\r\n        </div>\r\n      </SkeletonTheme>,\r\n    );\r\n  }\r\n\r\n  return <>{skeletonCards}</>;\r\n};\r\n\r\nconst CharList = (props) => {\r\n  const [chars, setChars] = useState([]);\r\n  const [loading, isLoading] = useState(false);\r\n  const [offset, setOffset] = useState(null);\r\n  const [loadingExtraChar, isLoadingExtraChar] = useState(false);\r\n  const [firstLoading, isFirstLoadingDone] = useState(false);\r\n  const [activeCard, setActiveCard] = useState(null);\r\n  const marvel = new Marvel();\r\n  const { getActiveChar, charInfoBlock, total } = props;\r\n\r\n  useEffect(() => {\r\n    setOffset(marvel._baseOffset);\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (offset && !firstLoading) {\r\n      getCharacters();\r\n      isFirstLoadingDone(true);\r\n    }\r\n    if (firstLoading && loadingExtraChar) {\r\n      const getList = async () => {\r\n        const chars = await marvel.getCharactersList(offset);\r\n        return chars;\r\n      };\r\n\r\n      getList().then((newChars) => {\r\n        setChars((prevChars) => [...prevChars, ...newChars]);\r\n        isLoadingExtraChar(false);\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [offset]);\r\n\r\n  const calculateDistance = async () => {\r\n    const documentHeight = Math.max(\r\n      document.body.scrollHeight,\r\n      document.documentElement.scrollHeight,\r\n      document.body.offsetHeight,\r\n      document.documentElement.offsetHeight,\r\n      document.body.clientHeight,\r\n      document.documentElement.clientHeight,\r\n    );\r\n\r\n    const windowHeight = window.innerHeight;\r\n    const scrolledPixels = window.scrollY;\r\n\r\n    if (\r\n      !loadingExtraChar &&\r\n      scrolledPixels >= documentHeight - windowHeight - 50\r\n    ) {\r\n      await setOffset((offset) => offset + 9);\r\n      isLoadingExtraChar(true);\r\n    }\r\n  };\r\n\r\n  let timeoutId;\r\n  const handleScroll = () => {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => {\r\n      calculateDistance();\r\n    }, 20);\r\n  };\r\n\r\n  const getCharacters = async () => {\r\n    isLoading(true);\r\n    try {\r\n      const chars = await marvel.getCharactersList(offset);\r\n      setChars(chars);\r\n    } catch (error) {\r\n      isLoading(false);\r\n      throw new Error(error);\r\n    } finally {\r\n      isLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    activeCard?.classList.add('active-card');\r\n  }, [activeCard]);\r\n\r\n  const onCardFocus = (e, id) => {\r\n    const card = e.target.closest('.char-list__item');\r\n    activeCard?.classList.remove('active-card');\r\n\r\n    setActiveCard(card);\r\n    getActiveChar(id);\r\n  };\r\n  const onCardClick = () => {\r\n    const charInfo = charInfoBlock.current;\r\n    scroll.scrollTo(charInfo.offsetTop - 50, {\r\n      duration: 400,\r\n      smooth: 'easeInOutQuad',\r\n    });\r\n  };\r\n\r\n  const cards = chars.map((char) => (\r\n    <Card\r\n      name={char.name}\r\n      onCardFocus={(e) => onCardFocus(e, char.id)}\r\n      key={char.id}\r\n      img={char.thumbnail}\r\n      onCardClick={onCardClick}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <motion.section\r\n      initial='hidden'\r\n      whileInView='visible'\r\n      viewport={{ once: true }}\r\n      className='char-list'\r\n      variants={cardAnim}\r\n      custom={2}\r\n    >\r\n      {loading ? <CardSkeleton /> : cards}\r\n      {total > offset && <ListLoader />}\r\n    </motion.section>\r\n  );\r\n};\r\n\r\nexport default CharList;\r\n","import './searchForm.scss';\r\n\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Loader from '../loader/Loader';\r\n\r\nimport Marvel from '../../services/Marvel';\r\nconst marvel = new Marvel();\r\n\r\nconst SuccessResponse = ({ data, value, color }) => {\r\n  const char = value.charAt(0).toUpperCase() + value.slice(1);\r\n  return (\r\n    <>\r\n      <h3 style={{ color: color }}> There is! Visit {char}'s page?</h3>\r\n      <Link\r\n        to={`/characters/${data.id}`}\r\n        className='btn gray-btn search-form__gray-btn'\r\n      >\r\n        To Page\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SearchForm = () => {\r\n  const [value, setValue] = useState('');\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [loading, isLoading] = useState(false);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setSearchResult('');\r\n      isLoading(true);\r\n      const data = await marvel.getCharInfoByName(value);\r\n      setSearchResult(\r\n        <SuccessResponse data={data} value={value} color={'#03710E'} />,\r\n      );\r\n    } catch (error) {\r\n      setSearchResult(\r\n        'The character was not found. Check the name and try again',\r\n      );\r\n    } finally {\r\n      isLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className='search-form'>\r\n      <div className='search-form__content'>\r\n        <h2 className='search-form__title'>Or find a character by name:</h2>\r\n        <form onSubmit={onSubmit} className='search-form__form' action='#'>\r\n          <div className='search-form__form-content'>\r\n            <input\r\n              className='search-form__input'\r\n              type='text'\r\n              placeholder='Enter name'\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <button className='btn red-btn search-form__button' type='submit'>\r\n              Find\r\n            </button>\r\n          </div>\r\n\r\n          <div className='search-form__result'>{searchResult}</div>\r\n        </form>\r\n        {loading && <Loader />}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { motion } from 'framer-motion';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\n\r\nimport Marvel from '../../services/Marvel';\r\n\r\nimport SearchForm from '../searchForm/SearchForm';\r\nimport { cardAnim } from '../../animations/anim';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst ComicsList = ({ comics }) => {\r\n  return comics.length > 0\r\n    ? comics.map((item, i) => {\r\n        const url = item.resourceURI;\r\n        const parts = url.split('/');\r\n        const comicId = parts[parts.length - 1];\r\n        return (\r\n          <Link key={i} to={`/comics/${comicId}`}>\r\n            <li className='char-info__comics-list-item'>{item.name}</li>\r\n          </Link>\r\n        );\r\n      })\r\n    : 'Comics not found';\r\n};\r\nconst CharInfoContent = ({ state }) => {\r\n  if (!state) {\r\n    return (\r\n      <div className='char-info__content'>\r\n        <div className='char-info__character'>\r\n          <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n            <Skeleton height={190} width={190} />\r\n          </SkeletonTheme>\r\n          <div className='char-info__text'>\r\n            <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n              <p style={{ fontWeight: 'bold' }}>Choose a character</p>\r\n\r\n              <Skeleton width={150} />\r\n            </SkeletonTheme>\r\n            <div className='char-info__buttons'>\r\n              <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n                <Skeleton width={100} height={40} />\r\n                <Skeleton width={100} height={40} />\r\n              </SkeletonTheme>\r\n            </div>\r\n          </div>\r\n          <div className='char-info__description'>\r\n            <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n              <Skeleton count={3} />\r\n            </SkeletonTheme>\r\n          </div>\r\n        </div>\r\n        <div className='char-info__comics'>\r\n          <h4 className='char-info__comics-title'>\r\n            <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n              <Skeleton width={100} />\r\n            </SkeletonTheme>\r\n          </h4>\r\n          <ul className='char-info__comics-list'>\r\n            <SkeletonTheme baseColor='#b0b0b0' highlightColor='#c0c0c0'>\r\n              <Skeleton count={5} />\r\n            </SkeletonTheme>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { name, thumbnail, homepage, wiki, description, comics, id } = state[0];\r\n\r\n  return (\r\n    <div className='char-info__content'>\r\n      <div key={id} className='char-info__character'>\r\n        <img className='char-info__img' src={thumbnail} alt={name} />\r\n        <div className='char-info__text'>\r\n          <h2 className='char-info__title'>{name}</h2>\r\n          <div className='char-info__buttons'>\r\n            <a className='btn red-btn char-info__btn' href={homepage}>\r\n              Homepage\r\n            </a>\r\n            <a className='btn gray-btn char-info__btn' href={wiki}>\r\n              Wiki\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className='char-info__description'>{description}</div>\r\n      </div>\r\n      <div className='char-info__comics'>\r\n        <h4 className='char-info__comics-title'>Comics:</h4>\r\n        <ul className='char-info__comics-list'>\r\n          {<ComicsList comics={comics} />}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n  const charInfoBlock = useRef(null);\r\n  useEffect(() => {\r\n    props.getCharInfoBlock(charInfoBlock);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    const marvel = new Marvel();\r\n\r\n    const getCharacter = async () => {\r\n      const { activeChar } = props;\r\n      if (!activeChar) return;\r\n\r\n      try {\r\n        const charData = await marvel.getCharInfo(activeChar);\r\n        setChar(charData);\r\n      } catch (error) {\r\n        console.error('Error fetching character information:', error);\r\n      }\r\n    };\r\n\r\n    getCharacter();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.activeChar]);\r\n\r\n  return (\r\n    <motion.section\r\n      initial='hidden'\r\n      whileInView='visible'\r\n      viewport={{ once: true }}\r\n      ref={charInfoBlock}\r\n      id='char-info'\r\n      className='char-info'\r\n      variants={cardAnim}\r\n      custom={4}\r\n    >\r\n      <CharInfoContent state={char} />\r\n      <SearchForm />\r\n    </motion.section>\r\n  );\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport AppMain from '../appMain/AppMain';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport AppMainList from '../appMainList/AppMainList';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport Marvel from '../../services/Marvel';\r\n\r\nconst CharactersPage = () => {\r\n  const [activeChar, setChar] = useState(null);\r\n  const [totalCharAmount, setCharAmount] = useState(null);\r\n  const [randomCharBlock, setRandomCharBlock] = useState(null);\r\n  const [charInfoBlock, setCharInfoBlock] = useState(null);\r\n\r\n  const marvel = new Marvel();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getTotalCharAmount();\r\n    };\r\n\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getActiveChar = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  const getCharInfoBlock = (block) => {\r\n    setCharInfoBlock(block);\r\n  };\r\n\r\n  const getTotalCharAmount = async () => {\r\n    const totalChar = await marvel.getAllCharacters(1);\r\n    const total = totalChar.data.total;\r\n    setCharAmount(total);\r\n  };\r\n\r\n  const handleRandomCharBlock = (char) => {\r\n    setRandomCharBlock(char);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Characters</title>\r\n        <meta name='description' content='Characters Page' />\r\n      </Helmet>\r\n      <AppMain randomCharBlock={randomCharBlock} />\r\n      <RandomChar\r\n        setRandomChar={handleRandomCharBlock}\r\n        title='Random character'\r\n      />\r\n      <AppMainList>\r\n        <CharList\r\n          charInfoBlock={charInfoBlock}\r\n          total={totalCharAmount}\r\n          getActiveChar={getActiveChar}\r\n        />\r\n        <CharInfo getCharInfoBlock={getCharInfoBlock} activeChar={activeChar} />\r\n      </AppMainList>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharactersPage;\r\n"],"names":["ListLoader","_jsx","className","children","_jsxs","props","motion","main","initial","whileInView","viewport","once","img","variants","imgAnim","custom","src","spiderMan","alt","h1","textAnim","h3","button","onClick","scrollToRandomCharBlock","randomChar","randomCharBlock","current","window","scrollTo","behavior","top","offsetTop","_ref","title","section","h4","blockTitleAnim","div","dividerAnim","CharContent","state","thumbnail","name","description","homepage","wiki","_Fragment","href","loading","setLoading","useState","hasError","setError","_isMounted","setIsMounted","charData","setCharData","useRef","setRandomChar","marvel","Marvel","useEffect","getCharacterInfo","async","id","Math","floor","random","char","getCharInfo","length","slice","MAXLENGTH","onError","onLoadInfo","loader","Loader","error","Error","content","ref","BlockTitle","cardAnim","miniSpiderMan","Card","onCardFocus","onCardClick","tabIndex","onFocus","CardSkeleton","skeletonCards","i","push","SkeletonTheme","baseColor","highlightColor","Skeleton","height","width","count","chars","setChars","isLoading","offset","setOffset","loadingExtraChar","isLoadingExtraChar","firstLoading","isFirstLoadingDone","activeCard","setActiveCard","getActiveChar","charInfoBlock","total","_baseOffset","addEventListener","handleScroll","removeEventListener","getCharacters","getCharactersList","getList","then","newChars","prevChars","timeoutId","clearTimeout","setTimeout","documentHeight","max","document","body","scrollHeight","documentElement","offsetHeight","clientHeight","windowHeight","innerHeight","scrolledPixels","scrollY","calculateDistance","classList","add","charInfo","scroll","duration","smooth","cards","map","e","card","target","closest","remove","SuccessResponse","data","value","color","charAt","toUpperCase","style","Link","to","concat","SearchForm","setValue","searchResult","setSearchResult","onSubmit","preventDefault","getCharInfoByName","action","type","placeholder","onChange","ComicsList","comics","item","parts","resourceURI","split","comicId","CharInfoContent","_ref2","fontWeight","setChar","getCharInfoBlock","activeChar","console","getCharacter","CharactersPage","totalCharAmount","setCharAmount","setRandomCharBlock","setCharInfoBlock","getTotalCharAmount","fetchData","getAllCharacters","Helmet","AppMain","RandomChar","AppMainList","CharList","CharInfo","block"],"sourceRoot":""}